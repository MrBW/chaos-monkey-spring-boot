package de.codecentric.spring.boot.chaos.monkey.watcher.outgoing;

import java.util.HashMap;
import java.util.Random;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseCookie;
import org.springframework.http.client.reactive.ClientHttpResponse;
import org.springframework.util.MultiValueMap;
import org.springframework.util.MultiValueMapAdapter;
import org.springframework.web.reactive.function.client.ClientRequest;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import org.springframework.web.reactive.function.client.ExchangeFunction;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public class ChaosMonkeyWebClientWatcher implements ExchangeFilterFunction {

  @Override
  public Mono<ClientResponse> filter(ClientRequest clientRequest,
      ExchangeFunction exchangeFunction) {
    return null;
  }

  static class ErrorResponse implements ClientHttpResponse {

    static final String ERROR_TEXT = "This error is generated by Chaos Monkey for Spring Boot";
    static final String ERROR_BODY =
        "{\"error\": \"This is a Chaos Monkey for Spring Boot generated failure\"}";

    static final HttpStatus[] ERROR_STATUS_CODES = {
        HttpStatus.INTERNAL_SERVER_ERROR,
        HttpStatus.BAD_REQUEST,
        HttpStatus.FORBIDDEN,
        HttpStatus.UNAUTHORIZED,
        HttpStatus.NOT_FOUND,
    };

    private HttpStatus status;

    @Override
    public HttpStatus getStatusCode() {
      if (status == null) {
        status = ERROR_STATUS_CODES[new Random().nextInt(ERROR_STATUS_CODES.length)];
      }
      return status;
    }

    @Override
    public int getRawStatusCode() {
      return getStatusCode().value();
    }

    @Override
    public MultiValueMap<String, ResponseCookie> getCookies() {
      return new MultiValueMapAdapter<>(new HashMap<>());
    }

    @Override
    public Flux<DataBuffer> getBody() {
      return Flux.just();
    }

    @Override
    public HttpHeaders getHeaders() {
      return new HttpHeaders();
    }
  }
}
